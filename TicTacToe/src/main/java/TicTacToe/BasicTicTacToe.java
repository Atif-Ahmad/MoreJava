/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TicTacToe;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.math3.util.Pair;

public class BasicTicTacToe {
	
	
	static ArrayList<Integer> playerPositions = new ArrayList<Integer>();
	static ArrayList<Integer> cpuPositions = new ArrayList<Integer>();
	static ArrayList<List<Integer>> win = new ArrayList<List<Integer>>();
	
	
	public static void main(String[] args) {
		char[][] Board = { { ' ', '|', ' ', '|', ' ' }, { '-', '+', '-', '+', '-' }, { ' ', '|', ' ', '|', ' ' },
				{ '-', '+', '-', '+', '-' }, { ' ', '|', ' ', '|', ' ' } };
		
		
		BasicTicTacToe ttt = new BasicTicTacToe();
		
		ttt.printGameBoard(Board);

		while (true) {
			Scanner scan = new Scanner(System.in);
			System.out.println("Enter your placement: 1-9");
			int playerPos = scan.nextInt();
			while (playerPositions.contains(playerPos) || cpuPositions.contains(playerPos)) {
				System.out.println("Position Taken, do another one brudda");
				playerPos = scan.nextInt();
			}

			ttt.placePiece(Board, playerPos, "player");
			String result = ttt.checkWinner();
			if (result.length() > 0) {
				System.out.println(result);
				break;
			}
			
//			Random r = new Random();
//			int cpuPos = r.nextInt(9) + 1;
//			while (playerPositions.contains(cpuPos) || cpuPositions.contains(cpuPos)) {
//				cpuPos = r.nextInt(9) + 1;
//			}
//			placePiece(Board, cpuPos, "Computer");
			
			ttt.placeCompPiece(Board);
			
			//placeCompPiece call placePiece and pass in all the stuff

			result = ttt.checkWinner();
			if (result.length() > 0) {
				System.out.println(result);
				break;
			}
		}

	}
 
	

	public  void printGameBoard(char[][] Board) {
		for (char[] row : Board) {
			for (char c : row) {
				System.out.print(c);
			}
			System.out.println();
		}
	}

	public  void placePiece(char[][] Board, int pos, String user) {

		char symbol = ' ';
		if (user.equals("player")) {
			symbol = 'X';
			playerPositions.add(pos);
		} else if (user.equals("Computer")) {
			symbol = 'O';
		}

		switch (pos) {
		case 1:
			Board[0][0] = symbol;
			break;
		case 2:
			Board[0][2] = symbol;
			break;
		case 3:
			Board[0][4] = symbol;
			break;
		case 4:
			Board[2][0] = symbol;
			break;
		case 5:
			Board[2][2] = symbol;
			break;
		case 6:
			Board[2][4] = symbol;
			break;
		case 7:
			Board[4][0] = symbol;
			break;
		case 8:
			Board[4][2] = symbol;
			break;
		case 9:
			Board[4][4] = symbol;
			break;
		}
		System.out.println(String.format("*****%s Played at pos %d *****", user,pos));

		printGameBoard(Board);

	}

	public  void placeCompPiece(char[][] Board) {
		
		int cpuPos=0;

		List<Pair<Integer, Integer>> lastTwoMoves;

		char symbol = ' ';

		symbol = 'O';
		Boolean isAWin = false;
		if (playerPositions.size()>=2) {
			
			Combinations c = new Combinations();
			lastTwoMoves = c.combinations(playerPositions);
			
			
			
			//instantiate combi class
			//get lst andfor each pair, check if it matches the win position
//			lastTwoMoves = playerPositions.subList(playerPositions.size() - 2, playerPositions.size());
		
			for (Pair<Integer, Integer> p:lastTwoMoves) {
			
				for (List<Integer> i : win) {
					if (i.contains(p.getFirst()) && i.contains(p.getSecond())) {
						isAWin = true;
						
						List<Integer> copy = new ArrayList<>();
						makeCopy(i, copy);
						
						copy.remove(p.getFirst());
						copy.remove(p.getSecond());
						
						
											
						
						cpuPos = copy.get(0);
					

						
					}
				}
			}
		}
		if (cpuPositions.contains(cpuPos) || !isAWin){
			Random r = new Random();
			cpuPos 	= r.nextInt(9) + 1;
			while (playerPositions.contains(cpuPos) || cpuPositions.contains(cpuPos)) {
				cpuPos = r.nextInt(9) + 1;
				
			}
		}
		
		cpuPositions.add(cpuPos);

		placePiece(Board, cpuPos, "Computer");
	}

	private  void makeCopy(List<Integer> i, List<Integer> copy) {
		// TODO Auto-generated method stub
		for (Integer x: i) {
			copy.add(x);
		}
	}

	public  String checkWinner() {
		List<Integer> topRow = Arrays.asList(1, 2, 3);
		List<Integer> medRow = Arrays.asList(4, 5, 6);
		List<Integer> bottomRow = Arrays.asList(7, 8, 9);

		List<Integer> leftCol = Arrays.asList(1, 4, 7);
		List<Integer> midCol = Arrays.asList(2, 5, 8);
		List<Integer> rightCol = Arrays.asList(3, 6, 9);

		List<Integer> firstCross = Arrays.asList(1, 5, 9);
		List<Integer> secondCross = Arrays.asList(3, 5, 7);

		win.add(topRow);
		win.add(medRow);
		win.add(bottomRow);
		win.add(leftCol);
		win.add(midCol);
		win.add(rightCol);
		win.add(firstCross);
		win.add(secondCross);

		for (List<Integer> l : win) {
			if (playerPositions.containsAll(l)) {
				return "Human Player wins. Congratulations =D";
			} else if (cpuPositions.containsAll(l)) {
				return "You lose. Try again. :(";
			} else if (playerPositions.size() + cpuPositions.size() == 9) {
				return "Tie";
			}
		}

		return "";
	}

		
}
