/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package GradeAverage;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public class Grade {
	public static void main(String[] args) throws Exception{
		/*
		 * 1. read line by line from file
		 * 2. split the line
		 * 3. check if name aready exists in the hashmap
		 * 4a.If name exist:
		 * 		get the value by name from hashmao
		 * 		add to the value(which is an array list)
		 * 4b.If name not exists:
		 * 		create a new arraylist
		 * 		add the arraylist to the hashmap for the name
		 * 
		 * 5. Once u have finished reading entire file, ask user for name
		 * 6. for the given name, get the arraylist from mao
		 * 7. calculate average for that list and display
		 */
		
		
		File file = new File("/Users/atifahmad/development/java/MoreJava/GradeAverage]/src/main/resources/Grade.txt");
		BufferedReader br = new BufferedReader(new FileReader(file)); 
		//this is creating an object of the class that will read the file
		
		HashMap <String, List<Double>> studGrades = new HashMap<>();
		//hashmap will store student's name and their gpas over 4 years.
		String str;
		
		while ((str = br.readLine())!= null) {
			

			if (!str.equals("")) {
				String [] storer = new String[str.length()];
				storer = split(str, ',');	
//				System.out.println(storer[0] + " , " + storer[2]); //prints out name and gpa (not grade level)
				if (studGrades.containsKey(storer[0])) {
					studGrades.get(storer[0]).add(Double.parseDouble(storer[2])); //convert from string to double
					//since the value of the hashmap is an arraylist of type Double
					//what this does is it sticks the next gpa of the student
					//at the end of the arraylist in the hashmap.
				} else {
					List <Double> tempGrades = new ArrayList<>();
					//we need to create a new arraylist to store in the hashmap
					//because we defined the hashmap as List<Double>. This will
					//store the first gpa, then it will go to the upper segment of code.
					tempGrades.add(Double.parseDouble(storer[2]));
					studGrades.put(storer[0], tempGrades);
					//with the arraylist created, now all we need to do is add values to the 
					//already existing arraylist 
				}
				
				
				
			} 
			
			//getAvg(studAvgGrades.toArray(new Double[studAvgGrades.size()]))
			
			
		}
		System.out.println(studGrades);
		
		Scanner sc = new Scanner(System.in);		
		System.out.println("Who's average gpa do you want to find?");
		String name = sc.nextLine();
	
		while(!studGrades.containsKey(name)) {
			System.out.println("That name isn't in our database. Try again");
			name = sc.nextLine();
		}
		System.out.println(name + ":" + getAvg(studGrades.get(name)));

		
	}
	private static double getAvg(List <Double> arr) {
		double sum = 0; 
		for (double i : arr) {
			sum +=i;
		}
		return sum/(arr.size()); //just finds the sum of all the elements and finds avg
	}
	private static double getAvg(double[] arr) {
		double sum = 0;
		for (double i : arr) {
			sum +=i;
		}
		return sum/(arr.length);
	}
	static String[] split(String input, char seperator) {
		input = input.concat(","); //the values are seperated by commas, but initially 
								   //it is one big string, so we are going through the string
		String temp = ""; 
		char[] ch = input.toCharArray(); //converting the string to characters
		String[] tempArray = new String[3]; //there are 3 values in the text file
		int i = 0;
		for (char c: ch) {
			if (c != seperator) {
				temp += c; //temp is an empty string, and we are adding every non 
						   //comma character before we find a comma
			}else if (c == ',') { //if it finds a comma, stop adding characters to String temp.
				tempArray = addString(i, tempArray, temp);
//				System.out.println(temp);
				//we reset the value of temp back to an empty string, and 
				//the previous value is now stored in an array. This way we can get the next
				//string after that comma. 
				temp = ""; 
				i++; //separating the strings by putting them in separate indexes.
			}
			
		}
		return tempArray;
	}
	
	public static String[] addString(int length, String[] arr, String y) {
		String[] newArr = new String[length+1]; //creates a new array of the passed
												//array + 1
		for (int i = 0; i < length; i ++) {
			newArr[i] = arr[i]; //copies the elements from the previous array
		}
		newArr[length] = y; //adds the value passed in into the array and returns it
		return newArr;
	}
	
//	public static int[] addInt(int length, int[] arr, int y) {
//		int[] newArr = new int[length+1];
//		for (int i = 0; i < length; i ++) {
//			newArr[i] = arr[i];
//		}
//		newArr[length] = y;
//		return newArr;
//	}
	
//	public static double[] addDouble(int length, double[] arr, double y) {
//		double[] newArr = new double[length+1];
//		for (int i = 0; i < length; i ++) {
//			newArr[i] = arr[i];
//		}
//		newArr[length] = y;
//		return newArr;
//	}
	
}
